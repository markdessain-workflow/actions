name: 'window'
description: ''
inputs:
  github_token:
    description: ''
    required: true
  database:
    description: ''
    required: false
  database_token:
    description: ''
    required: true
outputs:
  start_time:
    description: ''
    value: ${{ steps.window.outputs.start_time }}
  end_time:
    description: ''
    value: ${{ steps.window.outputs.end_time }}
runs:
  using: "composite"
  steps:
    - shell: bash
      id: window
      run: |

        # A local testing run using act will also just use the input values
        RUN_ID=${{ github.run_id }}
        RUN_NUMBER=${{ github.run_number }}

        if [[ $RUN_ID -eq 1 ]]; then
          echo "Running in a development environment locally with https://github.com/nektos/act"

          if [ -z "${{ github.event.inputs.start_time }}" ]; then
            echo "github.event.inputs.start_time is missing"
            exit 1
          fi

          if [ -z "${{ github.event.inputs.end_time }}" ]; then
            echo "github.event.inputs.end_time is missing"
            exit 1
          fi

          echo "::set-output name=start_time::${{ github.event.inputs.start_time }}"
          echo "::set-output name=end_time::${{ github.event.inputs.end_time }}"
          exit 0
        fi

        echo "Check for both start and end inputs"
        # Always use the provided values if they are both set
        if [ -z "${{ github.event.inputs }}" ]; then
          if [ -z "${{ github.event.inputs.start_time }}" ]; then
            if [ -z "${{ github.event.inputs.end_time }}" ]; then
              A=1
            else
              echo "Using input values"
              echo "::set-output name=start_time::${{ github.event.inputs.start_time }}"
              echo "::set-output name=end_time::${{ github.event.inputs.end_time }}"
              exit 0
            fi
          fi
        fi

        # Othewise we need to find the start and end times based on previous runs

        echo "Get Gihub workflow details"
        # Get the Github workflows
        ABC=$(curl --silent \
        -H "Accept: application/vnd.github.v3+json" \
        -H "Authorization: token ${{ inputs.github_token }}" \
        https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID | jq .)

        echo $ABC

        WORKFLOW_ID=$(echo $ABC | jq -r .workflow_id)

        # Find if this is the first time the run has happened
        echo "Check if workflow run before"

        DEF=$(curl --silent --location --request GET \
        --header 'Authorization: Bearer ${{ inputs.database_token }}' \
        --header 'Accept-Profile: pipeline' "${{ inputs.database }}/runs?and=(id.eq.$RUN_ID,workflow_id.eq.$WORKFLOW_ID)&limit=1" | jq -r '.[0]')

        echo $DEF 
        if [ "$DEF" = "null" ]; then
          A=1
        else
          echo "Has been run before so we use the previous values"

          START_TIME=$(echo $DEF | jq -r .start_time)
          END_TIME=$(echo $DEF | jq -r .end_time)

          echo "::set-output name=start_time::$START_TIME"
          echo "::set-output name=end_time::$END_TIME"

          exit 0
        fi

        echo "Check if checkpoint exists"

        # At this stage we need a checkpoint for our starting position
        CHECKPOINT=$(curl --location --request GET \
        --header 'Authorization: Bearer ${{ inputs.database_token }}' \
        --header 'Accept-Profile: pipeline' "${{ inputs.database }}/checkpoints?and=(key.eq.workflow_$WORKFLOW_ID)&limit=1" | jq -r '.[0]')

        echo $CHECKPOINT
        
        if [ "$CHECKPOINT" = "null" ]; then
          # ERROR
          echo "Unable to find a start and end time from inputs and no checkpoint exists"
          exit 1
        fi

        echo "First Time Running so we are using the checkpoint"

        # The end will be this workflow runs created_at
        START_TIME=$(echo $CHECKPOINT | jq -r .value)
        END_TIME=$(echo $ABC | jq -r .created_at)

        echo "::set-output name=start_time::$START_TIME"
        echo "::set-output name=end_time::$END_TIME"
