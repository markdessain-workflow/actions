name: 'job_end'
description: ''
inputs:
  github_token:
    description: ''
    required: true
  database:
    description: ''
    required: false
  database_token:
    description: ''
    required: true
  database_schema:
    description: ''
    required: false
    default: 'pipeline'
  time:
    description: ''
    required: true
runs:
  using: "composite"
  steps:
    - shell: bash
      run: |

        # A local testing run using act will also just use the input values
        RUN_ID=${{ github.run_id }}
        RUN_NUMBER=${{ github.run_number }}

        if [[ $RUN_ID -eq 1 ]]; then
          exit 0
        fi


        echo "Check with mode to use"
        if [ -z "${{ github.event.inputs }}" ]; then
          MODE=regular
        else
          if [ -z "${{ github.event.inputs.start_time }}" ]; then
            if [ -z "${{ github.event.inputs.end_time }}" ]; then
              MODE=regular
            else
              echo "Now allowed to set the end without a start"
              exit 1
            fi
          else
            if [ -z "${{ github.event.inputs.end_time }}" ]; then
              MODE=inital
            else
              MODE=adhoc
            fi
          fi     
        fi


        if [ "$MODE" = "adhoc" ]; then
          echo "adhoc"
          exit 0
        fi
        
        echo "Get Gihub workflow details"
        # Get the Github workflows
        ABC=$(curl --silent \
        -H "Accept: application/vnd.github.v3+json" \
        -H "Authorization: token ${{ inputs.github_token }}" \
        https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID | jq .)

        WORKFLOW_ID=$(echo $ABC | jq -r .workflow_id)


        # Check we can authenticate into the database
        DB_CONNECTION=$(curl --location --request GET \
        --header 'Authorization: Bearer ${{ inputs.database_token }}' \
        --header 'Accept-Profile: ${{ inputs.database_schema }}' ${{ inputs.database }} | jq .)

        COUNT=$(echo $DB_CONNECTION | jq '. | length')
        if [[ $COUNT -eq 1 ]]; then
          echo "Database Auth failed"
          echo $DB_CONNECTION
          exit 1
        fi


        
        echo "Update Done"

        curl "${{ inputs.database }}/runs?id=eq.$RUN_ID" \
        --header 'Authorization: Bearer ${{ inputs.database_token }}' \
        --header 'Content-Profile: ${{ inputs.database_schema }}'  \
        -X PATCH \
        -H "Content-Type: application/json" \
        -d '{ "checkpoint": true }'

